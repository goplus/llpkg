name: Verify Go Module

# don't limit to main branch
# consider maintenance branch
on:
  pull_request:
    branches:
      - 'release-branch.**'
      - main
    paths-ignore:
      - '.github/**'
      - LICENSE
      - README.md
      - '.gitignore'

jobs:
  llpkg-verification:
    name: Verify Go Module
    strategy:
      matrix:
        os:
          - macos-13
          # - macos-latest
          # - ubuntu-24.04
          # - ubuntu-24.04-arm
        llvm: [19]

    runs-on: ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check out LLGo
        uses: actions/checkout@v4
        with:
          repository: '1351914167/llgo'
          path: .llgo
          ref: get_pip
      - name: Check out LLPyg
        uses: actions/checkout@v4
        with:
          repository: 'toaction/llpyg'
          path: .llpyg
          ref: feat/v1
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x
      - name: Set up Tool
        run: |
              git clone https://github.com/PengPengPeng717/llpkgstore.git
              cd llpkgstore
              # git checkout 8_21
              git checkout post
              go build -o llpkgstore ./cmd/llpkgstore
              sudo mv llpkgstore /usr/local/bin/
      # - name: Set up Tool
      #   run: |
      #     go install -v github.com/PengPengPeng717/llpkgstore/cmd/llpkgstore@v0.9.0
      - name: Install dependencies
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install llvm@${{matrix.llvm}} bdw-gc openssl libffi libuv cmake conan lld@${{matrix.llvm}}
          brew link --force libffi
          echo "$(brew --prefix llvm@${{matrix.llvm}})/bin" >> $GITHUB_PATH
          echo "$(brew --prefix lld@${{matrix.llvm}})/bin" >> $GITHUB_PATH
          echo "Skipping C++ dependencies for Python-only build"
      # - name: Install dependencies
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     sudo apt-get update
      #     echo "deb http://apt.llvm.org/$(lsb_release -cs)/ llvm-toolchain-$(lsb_release -cs)-${{matrix.llvm}} main" | sudo tee /etc/apt/sources.list.d/llvm.list
      #     wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
      #     sudo apt-get install -y llvm-${{matrix.llvm}}-dev \
      #       clang-${{matrix.llvm}} \
      #       libclang-${{matrix.llvm}}-dev \
      #       lld-${{matrix.llvm}} \
      #       libunwind-${{matrix.llvm}}-dev \
      #       libc++-${{matrix.llvm}}-dev \
      #       pkg-config libgc-dev libssl-dev zlib1g-dev libffi-dev libuv1-dev
      #     echo "/usr/lib/llvm-${{matrix.llvm}}/bin" >> $GITHUB_PATH
      # - name: Pre setup Python and Conan
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     sudo apt install -y python3 python3-pip
      #     python3 -m pip install --upgrade pip
      #     # python3 -m pip install conan pydump
      #     # go install github.com/goplus/hdq/chore/pysigfetch@v0.8.1
      - name: Pre setup Python and Conan
        if: startsWith(matrix.os, 'macos')
        run: |
          python3 -m pip install conan pydump --break-system-packages
          # go install github.com/goplus/hdq/chore/pysigfetch@v0.8.1
          echo "Skipping Conan setup for Python-only build"
      # - name: Set up Conan
      #   run: |
      #     conan profile detect
      - name: Setup LLGo
        working-directory: .llgo
        run: |
          go install -v ./cmd/...
          export LLGO_ROOT=$PWD
          echo "LLGO_ROOT=$LLGO_ROOT" >> $GITHUB_ENV
          # ./install.sh
          # export LLGO_ROOT=$(pwd)
          # echo "LLGO_ROOT=$LLGO_ROOT" >> $GITHUB_ENV
          # https://github.com/goplus/llgo/issues/1135
          echo "LLGO_RPATH_CHANGE=ON" >> $GITHUB_ENV
      - name: Set up Python environment
        run: |
          echo "GOTOOLCHAIN=go1.24.5" >> $GITHUB_ENV
          # Set up Python environment as per llpyg guide
          export PYTHONHOME=$LLGO_ROOT/python
          export PATH=$PYTHONHOME/bin:$PATH
          export DYLD_LIBRARY_PATH=$PYTHONHOME/lib
          export PKG_CONFIG_PATH=$PYTHONHOME/lib/pkgconfig
          echo "PYTHONHOME=$PYTHONHOME" >> $GITHUB_ENV
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
      - name: Setup LLPyg
        working-directory: .llpyg
        run: |
          cd _xtool
          llgo install ./...
          cd ..
          go install -v ./cmd/...

      # - name: Install Python dependencies (Ubuntu)
      #   if: startsWith(matrix.os, 'ubuntu')
      #   run: |
      #     # python3 -m pip install numpy==1.26.4
      #     # python3 -c "import numpy; print('numpy version:', numpy.__version__)"
      #     # python3 -c "import site; print('site-packages:', site.getsitepackages())"
      #     # Set PYTHONPATH for llpyg using LLGo's Python environment
      #     echo "PYTHONPATH=$PYTHONHOME/lib/python3.12/site-packages" >> $GITHUB_ENV
      # - name: Install Python dependencies (macOS)
      #   if: startsWith(matrix.os, 'macos')
      #   run: |
      #     # python3 -m pip install numpy==1.26.4 --break-system-packages
      #     # python3 -c "import numpy; print('numpy version:', numpy.__version__)"
      #     # python3 -c "import site; print('site-packages:', site.getsitepackages())"
      #     # # Set PYTHONPATH for llpyg using LLGo's Python environment
      #     echo "PYTHONPATH=$PYTHONHOME/lib/python3.12/site-packages" >> $GITHUB_ENV
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            # **/llpkg.cfg
            **/llpyg.cfg
            # **/llcppg.cfg
            **/*.go
      - name: Debug changed files
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          echo "Any changed: ${{ steps.changed-files.outputs.any_changed }}"
          echo "All changed: ${{ steps.changed-files.outputs.all_changed }}"
      # - name: Test llpyg generation
      #   run: |
      #     # Test llpyg with numpy as per guide
      #     llpyg numpy
      #     echo "llpyg generation completed successfully"
      - name: Verification & Prebuilt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files || 'numpy/llpkg.cfg numpy/llpyg.cfg' }}
        run: llpkgstore verification
      - name: Run demotest process
        env:
          LLPKG_PATH: ${{ env.LLPKG_PATH }}
        run: llpkgstore demotest
      # - name: Create direct version mapping for Python packages
      #   run: |
      #     echo "Creating direct version mapping for Python packages..."
      #     echo "Python packages will be mapped directly: numpy@1.26.4 → v1.26.4"
          
      #     # 检查当前目录的 Python 包
      #     if [ -f "llpkg.cfg" ]; then
      #       PACKAGE_TYPE=$(grep -o '"type": *"[^"]*"' llpkg.cfg | cut -d'"' -f4)
      #       if [ "$PACKAGE_TYPE" = "python" ]; then
      #         PACKAGE_NAME=$(grep -o '"name": *"[^"]*"' llpkg.cfg | cut -d'"' -f4)
      #         PACKAGE_VERSION=$(grep -o '"version": *"[^"]*"' llpkg.cfg | cut -d'"' -f4)
      #         echo "Detected Python package: $PACKAGE_NAME@$PACKAGE_VERSION → v$PACKAGE_VERSION"
      #       fi
      #     fi
          
      #     # 检查子目录的 Python 包
      #     for dir in */; do
      #       if [ -d "$dir" ] && [ -f "$dir/llpkg.cfg" ]; then
      #         PACKAGE_TYPE=$(grep -o '"type": *"[^"]*"' "$dir/llpkg.cfg" | cut -d'"' -f4)
      #         if [ "$PACKAGE_TYPE" = "python" ]; then
      #           PACKAGE_NAME=$(grep -o '"name": *"[^"]*"' "$dir/llpkg.cfg" | cut -d'"' -f4)
      #           PACKAGE_VERSION=$(grep -o '"version": *"[^"]*"' "$dir/llpkg.cfg" | cut -d'"' -f4)
      #           echo "Detected Python package in $dir: $PACKAGE_NAME@$PACKAGE_VERSION → v$PACKAGE_VERSION"
      #         fi
      #       fi
      #     done
      # - name: Create Git tag
      #   run: |
      #     echo "Creating Git tag: numpy/v0.1.0"
          
      #     # Configure git user for tag creation
      #     # git config --local user.email "action@github.com"
      #     # git config --local user.name "GitHub Action"
          
      #     # Create the tag
      #     git tag "numpy/v0.1.0"
          
      #     # Push the tag to remote repository
      #     echo "Pushing tag to remote repository..."
      #     git push origin "numpy/v0.1.0"
          
      #     echo "✅ Git tag numpy/v0.1.0 created and pushed successfully"